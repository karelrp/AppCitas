/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyecto_tap;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import hola.Cita;
import hola.DBManager;
import hola.Persona;

import java.awt.Color;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.poi.sl.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author whois
 */
public class EspecialistaFrame extends javax.swing.JFrame {
    //private DBManager db = new DBManager();
    //Persona cliente = new Persona();
    Personaa doctor = new Personaa();
    int indexD;
    private ArrayList<Personaa> listPersonas = new ArrayList<>();
    private ArrayList<Citaa> citasReservadas = new ArrayList<>();

    /**
     * Creates new form EspecialistaFrame
     */
    public EspecialistaFrame() {
        initComponents();
        //vercitasbtn.setIcon(new ImageIcon("C:\\Users\\whois\\OneDrive\\Documentos\\NetBeansProject\\Proyecto_TAP\\src\\main\\java\\Imagenes\\informe-dental.png"));
        //eliminarclientebtn.setIcon(new ImageIcon("C:\\Users\\whois\\OneDrive\\Documentos\\NetBeansProject\\Proyecto_TAP\\src\\main\\java\\Imagenes\\diente-quebrado.png"));
    }

    public EspecialistaFrame(Personaa doctor, int indexD, ArrayList<Personaa> listPersonas, ArrayList<Citaa> citasReservadas) {
        initComponents();
        this.doctor = doctor;
        this.indexD = indexD;
        this.listPersonas = listPersonas;
        this.citasReservadas = citasReservadas;
        vercitasbtn.setIcon(new ImageIcon("C:\\Users\\papay\\Documents\\NetBeansProjects\\Proyecto_TAPPP\\src\\main\\java\\Imagenes\\informe-dental.png"));
        anadirEs.setIcon(new ImageIcon("C:\\Users\\papay\\Documents\\NetBeansProjects\\Proyecto_TAPPP\\src\\main\\java\\Imagenes\\agregaespecialista.png"));
        
        this.setLocationRelativeTo(null);

        JFrame IniciarsesionFrame = new JFrame();
        jLabel2.setText("BIENVENIDO DR: " + doctor.getNombre().toUpperCase() + " " + doctor.getApellido().toUpperCase());

        IniciarsesionFrame.repaint();
        getContentPane().setBackground(new Color(180, 205, 230));
        System.out.println("citas: " + citasReservadas.size());
        System.out.println("doctor: " + doctor.getNombre() + " y su numero de citas son: " + citasReservadas.size());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        vercitasbtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        anadirEs = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI", 1, 48)); // NOI18N
        jLabel2.setText("BIENVENIDO DR:");

        vercitasbtn.setForeground(new java.awt.Color(242, 242, 242));
        vercitasbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vercitasbtnActionPerformed(evt);
            }
        });

        jButton1.setText("PDF");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Ver mis citas");

        anadirEs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anadirEsActionPerformed(evt);
            }
        });

        jButton3.setText("Excel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setText("Añadir especialista");

        jMenu1.setText("USUARIO");

        jMenuItem1.setText("Ver información");
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(141, 141, 141))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(274, 274, 274))
            .addGroup(layout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addComponent(vercitasbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 270, Short.MAX_VALUE)
                .addComponent(anadirEs, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(121, 121, 121))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(175, 175, 175)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(146, 146, 146))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vercitasbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anadirEs, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addGap(105, 105, 105)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void vercitasbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vercitasbtnActionPerformed
        VerCitasFrame verCitasFrame = new VerCitasFrame(doctor, indexD, listPersonas, citasReservadas);
        verCitasFrame.setVisible(true);
        listPersonas = verCitasFrame.getListPersonas();
        // TODO add your handling code here:
    }//GEN-LAST:event_vercitasbtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        Map<String, String> infoPorCliente = new HashMap<>();
        int adeudo, abono, costo;
        String rutaArchivo = "C:\\Users\\whois\\OneDrive\\Documentos\\archivos_tap\\infopagos.pdf";

        // Cálculos de adeudo, abono y costo
        for (int i = 0; i < listPersonas.size(); i++) {
            adeudo = 0;
            abono = 0;
            costo = 0;
            Personaa cliente = listPersonas.get(i);
            if (!cliente.isDoctor()) {
                for (int j = 0; j < citasReservadas.size(); j++) {
                    if (citasReservadas.get(j).getCliente().getUsuario().equals(cliente.getUsuario())) {
                        System.out.println("doctor en turno: "+doctor.getUsuario());
                        System.out.println("doctor de la cita: "+citasReservadas.get(j).getDoctor().getUsuario());
                        if (citasReservadas.get(j).getDoctor().getUsuario().equals(doctor.getUsuario())) {
                            Citaa cita = citasReservadas.get(j);
                            if (cita.getDoctor().getUsuario().equals(doctor.getUsuario())) {
                                costo += doctor.getCostoConsulta();
                                if (cita.isCitaPagada()) {
                                    abono += cita.getPrecio();
                                } else {
                                    adeudo += cita.getPrecio() - cita.getAvancePago();
                                    abono += cita.getAvancePago();
                                }
                            }
                        }
                    }
                }
                String infoCliente = " Abono: " + abono + "                  Adeudo: " + adeudo;
                infoPorCliente.put(cliente.getUsuario(), infoCliente);
            }
        }

        // Generar el PDF
        try (PDDocument document = new PDDocument()) {
            PDPage page = new PDPage(PDRectangle.A4);
            document.addPage(page);

            PDPageContentStream contentStream = new PDPageContentStream(document, page);

            // Definir las posiciones de la tabla
            float margin = 50;
            float yStart = page.getMediaBox().getHeight() - margin;
            float tableWidth = page.getMediaBox().getWidth() - (2 * margin);
            float yPosition = yStart;
            float rowHeight = 20;
            float cellMargin = 5;

            // Calcular el número de filas y columnas
            int rowCount = infoPorCliente.size() + 1; // +1 para el encabezado
            int colCount = 3; // Nombre, Abono, Adeudo

            // Definir el tamaño de las celdas
            float colWidth = tableWidth / (float) colCount;
            float tableHeight = rowHeight * rowCount;
            boolean drawContent = true;

            // Comenzar el contenido del PDF
            contentStream.beginText();
            contentStream.setFont(PDType1Font.HELVETICA_BOLD, 12);
            contentStream.newLineAtOffset(margin, yPosition);

            // Encabezados de la tabla
            contentStream.showText("Cliente");
            contentStream.newLineAtOffset(colWidth, 0);
            contentStream.showText("Abono");
            contentStream.newLineAtOffset(colWidth, 0);
            contentStream.showText("Adeudo");
            contentStream.newLineAtOffset(-2 * colWidth, -rowHeight); // Mover al siguiente renglón

            // Iterar sobre la información de los clientes
            for (Map.Entry<String, String> entry : infoPorCliente.entrySet()) {
                if (drawContent) {
                    // Obtener el nombre de usuario y la información del cliente
                    String nombreUsuario = entry.getKey();
                    String infoCliente = entry.getValue();

                    // Escribir la información en las celdas
                    contentStream.showText(nombreUsuario);
                    contentStream.newLineAtOffset(colWidth, 0);
                    contentStream.showText(infoCliente);
                    contentStream.newLineAtOffset(colWidth, 0);
                    contentStream.showText(""); // Dejar en blanco la columna de Adeudo
                    contentStream.newLineAtOffset(-2 * colWidth, -rowHeight); // Mover al siguiente renglón

                    // Manejar el flujo del texto si es necesario
                    if (yPosition - tableHeight - cellMargin <= 0) {
                        // Añadir nueva página si el espacio es insuficiente
                        contentStream.endText();
                        contentStream.close();
                        document.addPage(new PDPage(PDRectangle.A4));
                        contentStream = new PDPageContentStream(document, document.getPage(document.getNumberOfPages() - 1));
                        contentStream.beginText();
                        contentStream.setFont(PDType1Font.HELVETICA_BOLD, 12);
                        yPosition = yStart;
                    }
                }
            }
            for (String cliente : infoPorCliente.keySet()) {
                // Recuperar información de infoCliente
                String infoCliente = infoPorCliente.get(cliente);

                // Dividir la cadena de infoCliente
                String[] partes = infoCliente.split("\\s+");

                // Imprimir todas las partes para saber en qué índice está cada cosa
                for (int i = 0; i < partes.length; i++) {
                    System.out.println("Parte " + i + ": " + partes[i]);
                }
            }
            int abonoTotal = 0;

// Iterar sobre el mapa infoPorCliente
            for (String cliente : infoPorCliente.keySet()) {
                // Recuperar información de infoCliente
                String infoCliente = infoPorCliente.get(cliente);

                // Dividir la cadena de infoCliente
                String[] partes = infoCliente.split("\\s+");
                int abonoRecuperado = Integer.parseInt(partes[2]); // El abono está en el índice 1

                // Sumar el abono al abonoTotal
                abonoTotal += abonoRecuperado;
            }

            System.out.println("Abono total de todos los clientes: " + abonoTotal);

            int adeudoTotal = 0;

// Iterar sobre el mapa infoPorCliente
            for (String cliente : infoPorCliente.keySet()) {
                // Recuperar información de infoCliente
                String infoCliente = infoPorCliente.get(cliente);

                // Dividir la cadena de infoCliente
                String[] partes = infoCliente.split("\\s+");
                int adeudoRecuperado = Integer.parseInt(partes[4]); // El adeudo está en el índice 4

                // Sumar el adeudo al adeudoTotal
                adeudoTotal += adeudoRecuperado;
            }

            System.out.println("Adeudo total de todos los clientes: " + adeudoTotal);

            contentStream.showText("TOTAL");
            contentStream.newLineAtOffset(colWidth, 0);
            contentStream.showText("" + abonoTotal);
            contentStream.newLineAtOffset(colWidth, 0);
            contentStream.showText("" + adeudoTotal); // Dejar en blanco la columna de Adeudo
            contentStream.newLineAtOffset(-2 * colWidth, -rowHeight);
            // Finalizar el contenido del PDF
            contentStream.endText();
            contentStream.close();

            // Guardar el PDF
            document.save(rutaArchivo);
            System.out.println("PDF creado exitosamente en: " + rutaArchivo);
             JOptionPane.showMessageDialog(this, "PDF generado correctamente.");

        } catch (IOException e) {
            e.printStackTrace();
            System.err.println("Error al generar el PDF: " + e.getMessage());
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void anadirEsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anadirEsActionPerformed
        AgregarEspecialistaFrame agregarEspecialistaFrame = new AgregarEspecialistaFrame(listPersonas);
        agregarEspecialistaFrame.setVisible(true);
    }//GEN-LAST:event_anadirEsActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String ex = "LISTA DE CITAS \n\n";
        for (int i = 0; i < citasReservadas.size(); i++) {
            if (citasReservadas.get(i).getDoctor().getUsuario().equals(doctor.getUsuario())) {
                ex = ex + "PACIENTE " + i + ": " + citasReservadas.get(i).getCliente().getNombre().toUpperCase() + " "
                        + citasReservadas.get(i).getCliente().getApellido().toUpperCase() + " (NOMBRE DE USUARIO: "
                        + citasReservadas.get(i).getCliente().getUsuario().toUpperCase() + ") FECHA DE CITA: "
                        + citasReservadas.get(i).getFecha();
                ex += "\n";
            }
        }

        String filePath = "C:\\Users\\whois\\OneDrive\\Documentos\\archivos_tap\\miscitas" + LocalDate.now() + ".csv";

        // Escribir la tabla en el archivo de texto
        try (FileWriter writer = new FileWriter(filePath)) {

            writer.write(ex);
            //writer.write("Hola");

            System.out.println("¡Datos escritos en el archivo CSV correctamente!");
            JOptionPane.showMessageDialog(this, "EXCEL generado correctamente.");
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al generar el EXCEL ");

        }

    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EspecialistaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EspecialistaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EspecialistaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EspecialistaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EspecialistaFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton anadirEs;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JButton vercitasbtn;
    // End of variables declaration//GEN-END:variables
}
