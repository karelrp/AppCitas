/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyecto_tap;

import com.google.gson.Gson;

import hola.Cita;
import hola.DBManager;
import hola.Persona;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Month;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.json.simple.JSONArray;
import org.json.simple.parser.JSONParser;

/**
 *
 * @author whois
 */
public class IniciarsesionFrame extends javax.swing.JFrame {
    private DBManager db = new DBManager();
    private ArrayList<Personaa> listPersonas = new ArrayList<>();
    private ArrayList<Citaa> citasReservadas = new ArrayList<>();
    
  /* private Persona usuario = new Persona("mar", "a", "mar", "mar", true, false);
    private Persona usuario1 = new Persona("kenia", "a", "k", "k", false, false);
    private Persona usuario2 = new Persona("j", "a", "k", "j", false, true);
    Cita cita = new Cita(500, usuario, usuario1, "" + LocalDateTime.of(2024, 05, 30, 11, 00, 00), 0);
    Cita cita1 = new Cita(500, usuario, usuario1, "" + LocalDateTime.of(2024, 05, 02, 11, 00, 00), 500);
    Cita cita2 = new Cita(500, usuario, usuario1, "" + LocalDateTime.of(2024, 05, 01, 11, 00, 00), 0);
    Cita cita4 = new Cita(500, usuario, usuario1, "" + LocalDateTime.of(2024, 05, 29, 11, 00, 00), 500);
    Cita cita3 = new Cita(500, usuario, usuario2, "" + LocalDateTime.of(2024, 05, 03, 11, 00, 00), 0);
*/
    //private Pers-ona
    //private Pers-ona*/
    public IniciarsesionFrame() {
        initComponents();
       /* cita.setPrecio(usuario.getCostoConsulta());
        cita1.setPrecio(usuario.getCostoConsulta());
       cita2.setPrecio(usuario.getCostoConsulta());
        cita3.setPrecio(usuario.getCostoConsulta());
       cita4.setPrecio(usuario.getCostoConsulta());
        cita4.setCitaPagada(true);
        cita1.setCitaPagada(true);
        listPersonas.add(usuario);
        listPersonas.add(usuario1);
        listPersonas.add(usuario2);
        citasReservadas.add(cita);
        citasReservadas.add(cita1);
        citasReservadas.add(cita2);
        citasReservadas.add(cita3);
        citasReservadas.add(cita4);
     */
       
        usuarioField.setText("");
        contraField.setText("");

        this.setLocationRelativeTo(null);

        //JFrame IniciarsesionFrame = new JFrame();

        //IniciarsesionFrame.repaint();
        getContentPane().setBackground(new Color(180, 205, 230));
        //System.out.println("doctor: " + usuario.getNombre() + " y su numero de citas son: " + citasReservadas.size());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        usuarioField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        regisButton = new javax.swing.JButton();
        entrarButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        contraField = new javax.swing.JPasswordField();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Usuario:");

        jLabel3.setText("Contraseña:");

        regisButton.setText("Registrarme");
        regisButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regisButtonActionPerformed(evt);
            }
        });

        entrarButton.setText("Entrar");
        entrarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entrarButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("¿No tienes cuenta?");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(regisButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(40, 40, 40))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(394, 394, 394)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(usuarioField, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(contraField, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(405, 405, 405)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(263, 263, 263)
                        .addComponent(entrarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(166, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(238, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(usuarioField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(contraField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(entrarButton)
                .addGap(72, 72, 72)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(regisButton)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void regisButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regisButtonActionPerformed
        RegistroFrame registroFrame = new RegistroFrame(listPersonas, citasReservadas);
        registroFrame.setVisible(true);
        listPersonas = registroFrame.getListPersonas();
    }//GEN-LAST:event_regisButtonActionPerformed

    private void entrarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entrarButtonActionPerformed
      /*  System.out.println("cantidad de personas guardadas " + listPersonas.size());
        for (int i = 0; i < listPersonas.size(); i++) {
            System.out.println("usuario: " + listPersonas.get(i).getUsuario());
        }
      //  System.out.println("doctor: " + .getNombre() + " y su numero de citas son: " + citasReservadas.size());
        int i = 0, j = 0;

        Persona persona = new Persona();

        for (j = 0; j < listPersonas.size(); j++) {
            persona = listPersonas.get(j);
            System.out.println("checamos que el usuario no este null: " + persona.getUsuario());
            if (!usuarioField.getText().equals("") && !contraField.getText().equals("")) {
                System.out.println("entro al ciclo");
                // System.out.println("usuario que esta checando inicio: "+persona.getUsuario());
                //System.out.println("field inicio: "+usuarioField.getText());
                if (persona.getUsuario().equals(usuarioField.getText())) {
                    System.out.println("entró al if de comparar usuarios iguales");
                    if (persona.getContrasena().equals(contraField.getText())) {
                        i = 1;
                        if (persona.isBloqueado()) {
                            System.out.println("entró");
                            JOptionPane.showMessageDialog(null, "LA CUENTA SE ENCUENTRA BLOQUEADA. COMUNÍQUESE CON UN ADMINISTRADOR");
                            break;
                        } else if (!persona.isDoctor()) {
                            ClienteFrame clienteFrame = new ClienteFrame(persona, j, listPersonas, citasReservadas);
                            clienteFrame.setVisible(true);
                            usuarioField.setText("");
                            contraField.setText("");
                            listPersonas = clienteFrame.getListPersonas();
                            break;
                        } else if (persona.isDoctor()) {
                            EspecialistaFrame especialistaFrame = new EspecialistaFrame(persona, j, listPersonas, citasReservadas);
                            especialistaFrame.setVisible(true);
                            usuarioField.setText("");
                            contraField.setText("");
                            break;
                        }
                    }
                }
            }

        }

        if (i == 0) {
            JOptionPane.showMessageDialog(null, "CONTRASEÑA O USUARIO INCORRECTO");
            usuarioField.setText("");
            contraField.setText("");
        }*/
       String usr = usuarioField.getText();
        String pass = contraField.getText();
        if (!usr.isEmpty() && !pass.isEmpty()) {
            try {
                Personaa persona = db.find(usr, pass);
                JOptionPane.showMessageDialog(null,persona.toString());
                if (persona != null) {

                    inicioSesion(persona);

                } else {
                    JOptionPane.showMessageDialog(null, "Usuario y/o contraseña incorrectos");
                }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error");
            }
        }

    }//GEN-LAST:event_entrarButtonActionPerformed

    private void inicioSesion(Personaa persona) {
        String u = persona.getUsuario();
        
        try {
            //listPersonas = db.llenar();
            for (int i = 0; i < listPersonas.size(); i++) {
                if (u.equals(listPersonas.get(i).getUsuario())) {
                    persona = listPersonas.get(i);
                    System.out.println("contraseña: "+persona.getContrasena());
                    if (persona.isBloqueado()) {
                            System.out.println("entró");
                            JOptionPane.showMessageDialog(null, "LA CUENTA SE ENCUENTRA BLOQUEADA. COMUNÍQUESE CON UN ADMINISTRADOR");
                            break;
                        } else if (persona.isDoctor()) {
                            System.out.println("citas: "+citasReservadas.size());
                        new EspecialistaFrame(persona, i, listPersonas, citasReservadas).setVisible(true);
                        System.out.println("fin");
                        usuarioField.setText("");
                        contraField.setText("");
                        break;
                        //this.hide();
                    } else {
                        new ClienteFrame(persona, i, listPersonas, citasReservadas).setVisible(true);
                        System.out.println("fin");
                        usuarioField.setText("");
                        contraField.setText("");
                        break;
                        //this.hide();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error");
        }
    }
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       /*
        String rutaCarpeta = "C:\\Users\\whois\\OneDrive\\Documentos\\json";

        try {
            // Leer datos del archivo "personas.json"
            BufferedReader brPersonas = new BufferedReader(
                    new FileReader(rutaCarpeta + "\\personas.json")
            );
            String lecturaPersonas = null;
            String resultadoPersonas = "";
            while ((lecturaPersonas = brPersonas.readLine()) != null) {
                resultadoPersonas += lecturaPersonas;
            }
            brPersonas.close();

            // Procesar datos del archivo "personas.json"
            JSONParser parserPersonas = new JSONParser();
            JSONArray jsonArrayPersonas = (JSONArray) parserPersonas.parse(resultadoPersonas);
            listPersonas.clear();
            for (int i = 0; i < jsonArrayPersonas.size(); i++) {
                Persona user = new Gson().fromJson(
                        jsonArrayPersonas.get(i).toString(), Persona.class
                );
                listPersonas.add(user);
            }
            System.out.println("Datos de personas leídos correctamente.");

            // Leer datos del archivo "citas.json"
            BufferedReader brCitas = new BufferedReader(
                    new FileReader(rutaCarpeta + "\\citas.json")
            );
            String lecturaCitas = null;
            String resultadoCitas = "";
            while ((lecturaCitas = brCitas.readLine()) != null) {
                resultadoCitas += lecturaCitas;
            }
            brCitas.close();

            // Procesar datos del archivo "citas.json"
            JSONParser parserCitas = new JSONParser();
            JSONArray jsonArrayCitas = (JSONArray) parserCitas.parse(resultadoCitas);
            citasReservadas.clear();
            for (int i = 0; i < jsonArrayCitas.size(); i++) {
                // Suponiendo que las citas están representadas por una clase llamada "Cita"
                Cita cita = new Gson().fromJson(
                        jsonArrayCitas.get(i).toString(), Cita.class
                );
                citasReservadas.add(cita);
            }
            System.out.println("Datos de citas leídos correctamente.");
        } catch (Exception e) {
            e.printStackTrace();
        }*/
        try {
            listPersonas = db.llenarP(citasReservadas);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        /*try {
            // Guardar listPersonas en personas.json
            BufferedWriter bwPersonas = new BufferedWriter(
                    new FileWriter("C:\\Users\\whois\\OneDrive\\Documentos\\json\\personas.json", false)
            );
            String jsonPersonas = new Gson().toJson(listPersonas);
            bwPersonas.write(jsonPersonas);
            bwPersonas.close();
            System.out.println("ListPersonas guardado en personas.json");

            // Guardar citasReservadas en citas.json
            BufferedWriter bwCitas = new BufferedWriter(
                    new FileWriter("C:\\Users\\whois\\OneDrive\\Documentos\\json\\citas.json", false)
            );
            String jsonCitas = new Gson().toJson(citasReservadas);
            bwCitas.write(jsonCitas);
            bwCitas.close();
            System.out.println("CitasReservadas guardado en citas.json");
        } catch (Exception e) {
            e.printStackTrace();
        }

        //new LoginFrame().setVisible(true);*/
    }//GEN-LAST:event_formWindowClosing

    public ArrayList<Personaa> getListPersonas() {
        return listPersonas;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IniciarsesionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IniciarsesionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IniciarsesionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IniciarsesionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IniciarsesionFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField contraField;
    private javax.swing.JButton entrarButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton regisButton;
    private javax.swing.JTextField usuarioField;
    // End of variables declaration//GEN-END:variables
}
